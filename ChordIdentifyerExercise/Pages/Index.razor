@page "/"
@inject ChordService ChordService

<h1>tjennÂ^ 📈</h1>
<h3>@CurrentChord</h3>
@if (ChordInput is null)
{
    <h4>Loading...</h4>
}
else
{
    <div class="guitar-container">
        @for (int i = 0; i < 6; i++)
        {
            <div class="guitar-string"></div>
        }
        <div class="guitar-thing">
            @for (int i = 0; i < 6; i++)
            {
                var y = i;
                <div class="open" @onclick="@(() => Check(y, 0))">@(!ChordInput[y,0] ? "⚪" : "🔴")</div>
            }
        </div>
        <div class="guitar-split"></div>

        <div class="guitar-frets">
            @for (int i = 1; i < FretCount; i++)
            {
                var x = i;
                <div class="guitar-frets-row">
                    @for (int j = 0; j < 6; j++)
                    {
                        var y = j;
                        <div class="fret" @onclick="@(() => Check(y, x))">@(!ChordInput[y,x] ? "⚪" : "🔴")</div>
                    }
                </div>
            }
        </div>
    </div>
}

@code {
    private int FretCount = 6;
    private bool[,] ChordInput { get; set; }
    private string ChordResult { get; set; }
    private string CurrentChord { get; set; } = "Not Found";

    protected override void OnInitialized()
    {
        ChordInput = new bool[6, FretCount];
    }

    private void Check(int y, int x)
    {
        ChordInput[y, x] = !ChordInput[y, x];
        IdentifyState();
    }

    private void IdentifyState()
    {
        var result = ChordService.GetChord(ChordInput);
        CurrentChord = String.IsNullOrEmpty(result) ? "Not Found" : result;
    }


}